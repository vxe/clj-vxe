Put things here which are generally useful and defined in terms of dependencies which you expect to 
be in every project

#+BEGIN_SRC clojure :tangle core.clj
  (ns clj-vxe.core
    (:require 
     [me.raynes.conch.low-level]
     [yaml.core]
     [clojure.data.xml]
     [clj-http.client]
     [cemerick.pomegranate]
     [java-time])
    (:use
     [clojure.java.shell :only [sh]]))


#+END_SRC

* file manipulation
*** tilde expansion
   #+BEGIN_SRC clojure :tangle core.clj
    (defn expand-home [s]
      (if (.startsWith s "~")
        (clojure.string/replace-first s "~" (System/getProperty "user.home"))
        s))
  #+END_SRC
*** mkdir-p
  #+BEGIN_SRC clojure :tangle core.clj
  (defn mkdir-p [path]
                    (clojure.java.io/make-parents (expand-home path)))
  #+END_SRC
*** pwd
       #+BEGIN_SRC clojure :tangle core.clj
     (defn pwd []
       (System/getProperty "user.dir"))
   #+END_SRC
*** ls-ltrh
    #+BEGIN_SRC clojure :tangle core.clj 
    (defn ls-ltrh
              ([]
               (println (:out (sh "ls" "-ltrh"))))
              ([value]
               (:out (sh "ls" "-ltrh"))))
    #+END_SRC
*** date
    #+BEGIN_SRC clojure :tangle core.clj
      (defn date-pp
             ([]
              (println (:out (sh "date"))))
             ([format]
              (println (:out (sh "date" format))))
             ([format value]
              (:out (sh "date" format))))
    #+END_SRC
* scheduling
** constants
** utilities

** components
   #+BEGIN_SRC clojure :tangle core.clj
     (defn do-cron [duration task]
          (future (loop []
                  (doall
                  (task)
                   (Thread/sleep duration))
                  (recur))))
   #+END_SRC
* date/time
** current time
 #+BEGIN_SRC clojure :tangle core.clj
 (defn now []
         (java.util.Date.))
 #+END_SRC
** n hours from now
   #+BEGIN_SRC clojure :tangle core.clj
     (defn n-hours-from-now [n]
       (java-time/plus (java-time/local-time) (java-time/hours n)))
   #+END_SRC
** n minutes from now 
   #+BEGIN_SRC clojure :tangle core.clj
     (defn n-mins-from-now [n]
       (java-time/plus (java-time/local-time) (java-time/minutes n)))
   #+END_SRC    
* math
** mean
 #+BEGIN_SRC clojure :tangle core.clj
   (defn mean [coll]
     (let [sum (apply + coll)
           count (count coll)
           ]
       (if (pos? count)
         (/ sum count)
         0)))
 #+END_SRC
*** standard deviation
 #+BEGIN_SRC clojure :tangle core.clj
 (defn standard-deviation [coll]
         (let [avg (mean coll)
               squares (for [x coll]
                         (let [x-avg (- x avg)]
                           (* x-avg x-avg)
                           )
                         )
               total (count coll)]

           (-> (/ (apply + squares)
                  (- total 1)
                  )
               (Math/sqrt)
               )
           )
         )

 #+END_SRC
** mode
 #+BEGIN_SRC clojure :tangle core.clj
   (defn mode [coll]
     (let [freqs (frequencies coll)
           occurrences (group-by second freqs)
           modes (last (sort occurrences))
           modes (->> modes
                      second
                      (map first))]
       modes))
 #+END_SRC
* strings
** parse integer from string
  #+BEGIN_SRC clojure :tangle core.clj
   (defn parse-int [string]
     (Integer/parseInt string))
 #+END_SRC
** keywordize string map
  #+BEGIN_SRC clojure :tangle core.clj
 (defn keywordize-map [map]
 (into {} 
   (for [[k v] map] 
     [(keyword k) v]))
 )
 #+END_SRC
** grep a sequence by regex
  #+BEGIN_SRC clojure :tangle core.clj
   (defn grep-seq [regex sequence]
           (for [line sequence]
             (if (re-matches regex (.toString line))
               line)))
 #+END_SRC
** capitalize all words
   #+BEGIN_SRC clojure :tangle core.clj
     (defn capitalize-words 
       "Capitalize every word in a string"
       [s]
       (->> (clojure.string/split (str s) #"\b") 
            (map clojure.string/capitalize)
            clojure.string/join))
   #+END_SRC
* data-processing
** xml
*** xml from lisp
 #+BEGIN_SRC clojure :tangle core.clj
   (defn xml-print [xml & file]
           (if (not (empty? file))
             (do
               (with-open [out-file (java.io.OutputStreamWriter.
                                     (java.io.FileOutputStream. (expand-home (first file)))
                                     "UTF-8")]
                 (clojure.data.xml/emit
                  (clojure.data.xml/sexp-as-element xml)
                  out-file)))
             (clojure.data.xml/sexp-as-element xml)))
 #+END_SRC
*** xml print string
 #+BEGIN_SRC clojure :tangle core.clj
   ;; (defn xml-print-str [xml]
   ;;                   (clojure.data.xml/emit-str (xml-print xml)))
   (defn xml-print-str [xml & file]
           (if (not (empty? file))
             (do
               (with-open [out-file (java.io.OutputStreamWriter.
                                     (java.io.FileOutputStream. (expand-home (first file)))
                                     "UTF-8")]
                 (-> xml
                     clojure.data.xml/sexp-as-element
                     (clojure.data.xml/emit
                      out-file))))
             (-> xml
                 clojure.data.xml/sexp-as-element
                 clojure.data.xml/emit-str)))
 #+END_SRC
*** xml print with stylehsheet
 #+BEGIN_SRC clojure :tangle core.clj
   (defn xml-print-stylesheet [stylesheet xml & file]
           (if (not (empty? file))
             (do
               (with-open [out-file (java.io.OutputStreamWriter.
                                     (java.io.FileOutputStream. (expand-home (first file)))
                                     "UTF-8")]

                 (clojure.data.xml/emit
                  (clojure.data.xml/sexps-as-fragment
                   stylesheet
                   xml)
                  out-file)))
             (clojure.data.xml/sexp-as-element xml)))
 #+END_SRC
*** add document declaration (processing instructions)
 #+BEGIN_SRC clojure :tangle core.clj
   ;; (defn add-processing-instructions [xml & stylesheet]
   ;;                   (if (not (empty? stylesheet))
   ;;                     (let [stylesheet (xsl/stylesheet {:version 3.0}
   ;;                                                      (xsl/template {:match "/"}
   ;;                                                                    (xsl/processing-instruction {:name "xsl-stylesheet"} (str "href=" (first stylesheet)))
   ;;                                                                    (xsl/copy-of {:select "node()"})))]
   ;;                       (if (.exists (io/file (expand-home xml)))
   ;;                         (-> stylesheet
   ;;                             xslt/compile-sexp
   ;;                             (xslt/transform (io/as-file (expand-home xml))))
   ;;                         (-> stylesheet
   ;;                             xslt/compile-sexp
   ;;                             (xslt/transform xml))))))


 #+END_SRC
*** add processing instructions
**** write to file
 #+BEGIN_SRC clojure :tangle core.clj
   ;; (defn add-processing-instructions-file [xml output & stylesheet]
   ;;                   (if (not (empty? stylesheet))
   ;;                     (let [stylesheet (xsl/stylesheet {:version 3.0}
   ;;                                                      (xsl/template {:match "/"}
   ;;                                                                    (xsl/processing-instruction {:name "xsl-stylesheet"} (str "href=" (first stylesheet)))
   ;;                                                                    (xsl/copy-of {:select "node()"})))]
   ;;                       (if (.exists (io/file (expand-home xml)))
   ;;                         (-> stylesheet
   ;;                             xslt/compile-sexp
   ;;                             (xslt/transform-to-file  (io/as-file (expand-home xml)) (io/file (expand-home output))))
   ;;                         (let [temp-file (java.io.File/createTempFile (uuid) ".xml")]
   ;;                           (spit temp-file xml)
   ;;                           (println (.getAbsolutePath temp-file))
   ;;                           (-> stylesheet
   ;;                               xslt/compile-sexp
   ;;                               (xslt/transform-to-file (.getAbsolutePath temp-file) (io/file output))))))))

 #+END_SRC
** create uuid
 #+BEGIN_SRC clojure :tangle core.clj
 (defn uuid [] (str (java.util.UUID/randomUUID)))
 #+END_SRC
* http
** curl url
 #+BEGIN_SRC clojure :tangle core.clj
   (defn curl
     ([url]
      (:body (clj-http.client/get url)))
     ([url headers]
      (:body (clj-http.client/get url headers))))
 #+END_SRC
*** TODO curl pretty print
*** TODO curl with optional parameter map
** download file to directory
   #+BEGIN_SRC clojure :tangle core.clj
     (defn copy-uri-to-file [uri file]
       (with-open [in (clojure.java.io/input-stream uri)
                   out (clojure.java.io/output-stream file)]
         (clojure.java.io/copy in out)))
   #+END_SRC
* OS services
** clipboard
*** get a reference to the current clipboard contents
 #+BEGIN_SRC clojure :tangle core.clj
 (defn get-clipboard []
   (.getSystemClipboard (java.awt.Toolkit/getDefaultToolkit)))
 #+END_SRC
*** get the contents of the clipboad
 #+BEGIN_SRC clojure :tangle core.clj
 (defn slurp-clipboard []
   (try
     (.getTransferData (.getContents (get-clipboard) nil) (java.awt.datatransfer.DataFlavor/stringFlavor))
     (catch java.lang.NullPointerException e nil)))
 #+END_SRC
*** push contents to the clipboard
 #+BEGIN_SRC clojure :tangle core.clj
 (defn spit-clipboard [text]
   (.setContents (get-clipboard) (java.awt.datatransfer.StringSelection. text) nil))
 #+END_SRC

** pretty print yaml
   #+BEGIN_SRC clojure :tangle core.clj
     (defn yaml-pp
       ([data] (println (yaml.core/generate-string data :dumper-options {:flow-style :block})))
       ([data path]   (spit (expand-home path) (yaml.core/generate-string data :dumper-options {:flow-style :block}))))
   #+END_SRC

   #+RESULTS:
   : #'home.core/pr-yaml
* sequence processing
** assoc-append
   #+BEGIN_SRC clojure :tangle core.clj
         (defn assoc-append [m k v]
         (if (contains? m k)
           (assoc m k (into {} [(k m)
                                v]))
           (assoc m k v)))
   #+END_SRC
** merge append
   merge to maps, creating a vector of values for key collisions
   #+BEGIN_SRC clojure :tangle core.clj
     (defn merge-append [m1 m2]
               (first (remove nil? (for [[k2 v2] m2]
                                     (if (contains? m1 k2)
                                       (assoc m1 k2 (flatten [v2 (k2 m1)])))))))
   #+END_SRC
** for remove nil
   #+BEGIN_SRC clojure :tangle core.clj
     (defmacro for* [[cursor coll] & loop-body]
       `(remove nil? (for [~cursor ~coll]
                       (do
                         ~@loop-body))))
   #+END_SRC

* emacs/cider
* repl
** unix terminal emulation
*** constants
**** os diagnostics
     #+BEGIN_SRC clojure :tangle core.clj
  (def os-diagnostics (str "set -o xtrace; hostname -f;rolename -l;free -mh;dmesg -T | grep -i error | grep -v usb | wc -l ;dmesg -T | grep -i error | grep -i 'sd[a-z]' | tail -30 ;lsscsi | wc -l;lsscsi;sudo ethtool $(sudo facter -p default_interface) | grep -i speed;dmesg -T | grep -i error | tail -30;ifconfig -a;last -50;uptime | grep -v day;uptime;supervisorctl status;uname -r; supervisorctl status | grep -v day;dmesg -T | grep -i error | grep \"Hardware Error\" | tail -1000;df -kh; sudo cat /proc/mdstat;sudo cat /sys/block/sda/queue/rotational"))
     #+END_SRC
*** lsof 
     #+BEGIN_SRC clojure :tangle core.clj
 (defn lsof []
   (let [c (me.raynes.conch.low-level/proc "lsof" "-iTCP" "-sTCP:LISTEN" "-P" "-n")]
     (future (me.raynes.conch.low-level/stream-to-out c :out))))
 #+END_SRC
*** ssh-tunnel
     #+BEGIN_SRC clojure :tangle core.clj
 (defn ssh-tunnel [host port]
   (let [c (me.raynes.conch.low-level/proc "ssh" (str "-NL" port ":127.0.0.1:" port) host)]
     (future (me.raynes.conch.low-level/stream-to-out c :out))))
 #+END_SRC
*** clush
     #+BEGIN_SRC clojure :tangle core.clj
       (defn clush
         ([host command]
          (let [c (me.raynes.conch.low-level/proc "clush" "-o" "\"-A\"" "-w" host "-B" command)
                output (me.raynes.conch.low-level/stream-to-out c :out)
                ]))
         ([host command pretty]
          (me.raynes.conch.low-level/stream-to-string (me.raynes.conch.low-level/proc "clush" "-o" "\"-A\"" "-w" host "-L" command) :out)))


 #+END_SRC
**** clush lsof
       #+BEGIN_SRC clojure :tangle core.clj
  (defn clush-lsof [host]
    (clush host "sudo lsof -iTCP -sTCP:LISTEN -P -n"))
  #+END_SRC
**** clush supervisorctl status
       #+BEGIN_SRC clojure :tangle core.clj
  (defn clush-sup-stat [host]
    (clush host "supervisorctl status"))

  #+END_SRC
**** os host diagnostics
       #+BEGIN_SRC clojure :tangle core.clj
  (defn clush-os-diagnostics [host]
    (clush host os-diagnostics))

  #+END_SRC
**** clush dmesg
       #+BEGIN_SRC clojure :tangle core.clj
  (defn clush-dmesg [host]
    (clush host "dmesg -T | grep -i error | wc -l"))
  #+END_SRC

** hotload dependency
   #+BEGIN_SRC clojure :tangle core.clj
(defmacro vxe-hotload-dependency [coordinates]
  (do
    (use '[cemerick.pomegranate :only (add-dependencies)])
    `(cemerick.pomegranate/add-dependencies :coordinates '[~coordinates]
                        :repositories (merge cemerick.pomegranate.aether/maven-central
                                             {"clojars" "https://clojars.org/repo"}))))
   #+END_SRC
